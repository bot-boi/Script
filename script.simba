// vim: set syntax=pascal:
// script.simba
// Contains or may eventually contain SRL, RSWalker, the OSRS client, some visual debugging tools (maybe), and a logger.
// This is the global context of the script, so things that need to be available globally will end up here.
//
//
// Examples
//
// How to start a client, create player, and login.
//
// begin
//   Script.Init('C:\Users\Administrator\jagexcache\jagexlauncher\bin\JagexLauncher');  // windows
//         OR
//   Script.Init('/usr/games/runescape --prmfile=oldschool.prm & echo -ne "\n"');       // linux rsu-client ppa. note: manual targeting isn't the same as automatic
//
//   Script.DeclarePlayer('foo', 'bar', 420);
//   Players.SetCurrent(0);
//   Script.Login();
// end.
//
//
// How to login any player at any time.
//
// begin
//   Players.SetCurrent(PlayerIndex);
//   Script.Login();
// end.


{$I SRL/osr.simba}
{$I RSWalker/Walker.simba}
{$I SRL/osr/rsclient.simba}
{$I SRL/osr/rsclient_overrides.simba}

const                                                                                                        // uk filter doesnt work ?                                        // popular & west coast US worlds
  MY_DEFAULT_WORLD_FILTER: TRSWorldFilter = [[WORLD_PVP, WORLD_DEADMAN, WORLD_SKILL, WORLD_AUSTRALIA, WORLD_GERMANY, WORLD_UK], [302,330,393,394,430,431,432,433,434,435,436,437,438,439,440]];

type
  TScript = record
    MapPath:    String;
    Walker:     TRSWalker;
    Antiban:    TAntiban;
    ClientPath: String;
  end;

var
  Script: TScript;
  Bitmap: TMufasaBitmap;
  prevBitmap: Integer = -1;   // TODO: find better place for this

// Script.LoadMap-: Loads a map into RSWalker.
procedure TScript.LoadMap(mapPath: String; downsample: Integer = 6); begin
  if Script.MapPath = mapPath then begin
    writeln(Format('Script.LoadMap-: Map %s has already been loaded', [mapPath]));
    Exit();
  end;

  if Assigned(Walker) then
    writeln('Script.LoadMap-: Walker already initialized.  Reloading Walker...');
    Walker.Free;

  writeln('Script.LoadMap-: Loading map: ' + mapPath);
  Walker.Init(mapPath, downsample);
  Script.MapPath := mapPath;
  AddOnTerminate(@Walker.Free);
end;

// Script.LoadMapSlices-: Loads map slices into RSWalker.
procedure TScript.LoadMapSlices(slices: Array of Array of Integer);     // [[5,6][5,5]] means slices 5_6.png & 5_5.png
var
  slicesSpecial: TPointArray;
  slice: Array of Integer;
begin
  for slice in slices do begin
    slicesSpecial.Append(Point(slice[0], slice[1]));
  end;

  if Assigned(Walker) then
    writeln('Script.LoadMapSlices-: Walker already initialized.  Reloading Walker...');
    Walker.Free;

  writeln('Script.LoadMapSlices-: Loading slices!');
  Walker.InitEx('world', slicesSpecial);
  AddOnTerminate(@Walker.Free);
end;

// Script.StartClient-: Initializes OSRS client & SRL
procedure TScript.StartClient(ClientPath: String); begin
  writeln('Script.StartClient-: Setting up SRL.');
  SRL.SetupForClient(ClientPath);
  writeln('Script.StartClient-: Client loaded (probably...).');
end;

// Script.Free-: Frees script resources.
procedure TScript.Free; begin
  writeln('Script.Free-: Freeing Script.');
  if Assigned(Walker) then
    Walker.Free;

  writeln('Script.Free-: Script freed.');
end;

// Script.LoginStatic-: Logs the Players.CurrentPlayer into CurrentPlayer.World.
function TScript.LoginStatic(): Boolean;
var
  user, pass: String;
  w: Integer;  // world
  p: TPlayer;  // current player
begin
  Result := False;
  p := Players.GetCurrent()^;
  user := p.LoginName;
  pass := p.Password;
  w    := p.World;

  writeln(Format('Script.LoginStatic-: Logging into World %d as %s.', [w, user]));

  if not SRL.isLoggedIn then begin
    if LoginScreen.GetCurrentWorld() <> w then begin
      writeln('Script.LoginStatic-: Selecting world ' + IntToStr(w));
      LoginScreen.OpenWorldSwitcher();
      WorldSwitcher.SelectWorld(w);
    end;

    if LoginScreen.Open() then LoginScreen.EnterDetails(user, pass);
    Wait(5000); // wait for client loading and window ID change. could be shorter
    RSClient.Find();
    if Lobby.IsOpen() then Lobby.EnterGame();
    Result := True;
  end;

  writeln('Script.LoginStatic-: Setting default camera options.');
  Options.SetZoom(50);
  Options.SetBrightness(100);
  Mainscreen.SetAngle(True);

  writeln('Script.LoginStatic-: Login complete.');
end;

function TScript.Login(worldParams: TRSWorldFilter = MY_DEFAULT_WORLD_FILTER): Boolean; // login using world filters
var
  p: TPlayer;  // current player
  tempWorld: Int32 = 0;

begin
  Result := False;
  p := Players.GetCurrent()^;
  p.WorldFilter := worldParams;
  tempWorld := p.World;
  p.World := 0;

  writeln(Format('Script.Login-: %s is logging in!', [p.LoginName]));
  Result := Players.LoginCurrent();
  p.World := tempWorld;


  writeln('Script.Login-: Setting default camera options.');
  Options.SetZoom(50);
  Options.SetBrightness(100);
  Mainscreen.SetAngle(True);

  writeln('Script.Login-: Login complete.');
end;

// Script.Init-: Initializes the Script, Antiban, Debugger, and (eventually) the Logger.
procedure TScript.Init(clientPath: String); begin
  writeln('Script.Init-: Initializing Context.');

  SRL.SetupForClient(clientPath);
  RSClient.SetFocus();

  writeln('Script.Init-: Initializing Antiban.');
  Antiban.Init(SKILL_TOTAL, 4);

  {$IFDEF DEBUG}
    writeln('Script.Init-: Initializing DEBUG Bitmap');
    Bitmap := GetMufasaBitmap(CreateBitmap(600, 600));
    Bitmap.FromClient();
  {$ENDIF}

  AddOnTerminate(@Script.Free);
  writeln('Script.Init-: Done.');
end;

// Script.Antiban-: Runs the Antiban.
procedure TScript.DoAntiban; begin
  writeln('Script.Antiban-: Doing Antiban.');
  if not SRL.IsLoggedIn() then begin
    writeln('Script.Antiban-: Player not logged in, relogging...');
    Script.Login();
    Exit;
  end;
  SRL.DismissRandom();
  Antiban.DoAntiban();
  writeln('Script.Antiban-: Antiban done!');
end;

// Script.DeclarePlayer-: Declares a Player.  Returns the index of the new player in the Players array.
function TScript.DeclarePlayer(name, pass: String; w: Integer; isActive: Boolean = True; isMember: Boolean = False): Integer;
begin
  with Players.New()^ do
  begin
    LoginName   := name;
    Password    := pass;
    IsActive    := isActive;
    IsMember    := isMember;
    World       := w;
  end;
  writeln(Format('Script.DeclarePlayer-: Username: %s, World: %d', [name, w]));
  Result := Players.GetCount() - 1;
end;

procedure TScript.DebugATPA(ATPA: T2DPointArray);
var
  b: TBox; // bounds
  width, height, bMapIndex: Int32;

begin
  if prevBitmap <> -1 then begin
    writeln('Script.DebugATPA-: Freeing previous bitmap.');
    FreeBitmap(prevBitmap);
  end;

  writeln('Script.DebugATPA-: Drawing ATPA.');

  b := Mainscreen.GetBounds();
  width  := b.X1 - b.X2;
  height := b.Y1 - b.Y2;
  if width  < 0 then width  := width  * -1;
  if height < 0 then height := height * -1;

  // i had some trouble with ATPA points exceeding bitmap bounds recently
  // it only happens when part of the debug bitmap is covered by another window, and presumably it only happens on linux
  bMapIndex := BitmapFromClient(b.X1, b.Y1, b.X2, b.Y2);
  CopyClientToBitmap(bMapIndex, b.X1, b.Y1, b.X2, b.Y2);
  DrawATPABitmap(bMapIndex, ATPA);
  DisplayDebugImgWindow(width, height);
  DrawBitmapDebugImg(bMapIndex);

  prevBitmap := bMapIndex;

  writeln('Script.DebugATPA-: Displaying ATPA.');
end;

procedure TScript.DebugTPA(TPA: TPointArray);
var
  b: TBox; // bounds
  width, height, bMapIndex: Int32;

begin
  if prevBitmap <> -1 then begin
    writeln('Script.DebugTPA-: Freeing previous bitmap.');
    FreeBitmap(prevBitmap);
  end;

  writeln('Script.DebugTPA-: Drawing TPA.');

  b := Mainscreen.GetBounds();
  width  := b.X1 - b.X2;
  height := b.Y1 - b.Y2;
  if width  < 0 then width  := width  * -1;
  if height < 0 then height := height * -1;

  bMapIndex   := CreateBitmap(width, height);
  CopyClientToBitmap(bMapIndex, b.X1, b.Y1, b.X2, b.Y2);
  DrawTPABitmap(bMapIndex, TPA, clRed);
  DisplayDebugImgWindow(width, height);
  DrawBitmapDebugImg(bMapIndex);

  prevBitmap := bMapIndex;

  writeln('Script.DebugTPA-: Displaying TPA.');
end;
